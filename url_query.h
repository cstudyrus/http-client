/**
 * \file
 *
 * Этот файл содержит определение типов, структур и прототипов функций,
 * предназначенных для работы с параметрами query, входящими в URL.
 *
 */

#ifndef _URL_QUERY_H_
#define _URL_QUERY_H_

#include<unistd.h>

/**
 * Эта структура предназначена дла работы с параметрами query-части URL.
 * Она содержит строки-ключи и соответствующие им строки-значения.
 * Если какой-то параметр не имеет значения, только ключ, то соответствующая ему строка-значение пуста.
 *
 */
struct __url_query_params{
	size_t n;			///< Количество параметров в query.
	char **keys;		///< Массив строк-ключей.
	char **values;		///< Массив строк-значений, они соответствуют ключам по индексу.
};
typedef struct __url_query_params* url_query_params;

/**
 * Эта функция выполняет инициализацию объекта типа url_query_params, который содержит
 * информацию о параметрах в query-части URL.
 *
 * Любая переменная типа url_query_params перед своим использованием должна быть проинициализирована
 * вызовом этой функции.
 *
 * \param [in,out] q Указатель на переменную типа url_query_params, которую следует инициализировать.
 *
 * \return Возвращает 0 в случае успешного завершения,
 * 	`ERROR_MEMORY_ALLOC` в случае ошибки выделения памяти под необходимые компоненты инициализируемой переменной.
 */
int url_query_params_init(url_query_params* q);

/**
 * Эта функция закрывает объект типа url_query_params и освобождает все связанные с ним ресурсы.
 *
 * Для того, чтобы вновь использовать закрытую переменную типа url_query_params, её надо заново
 * инициализировать с помощью функции url_query_params_init().
 *
 * \param [in, out] q Переменная типа  url_query_params, которая должна быть закрыта.
 */
void url_query_params_close(url_query_params q);

/**
 * Эта функция "загружает" информацию в переменную типа url_query_params из строки, представлящей собой
 * query-часть URL, то есть из строки, вида:
 *
 * `key1=value1&key2=value2&key3=value3...keyN=valueN`
 *
 * \param [in, out] q Проинициализированная переменная типа  url_query_params, информация в которую загружается.
 *
 * \param [in] src C-строка, содержащая query-часть URL.
 *
 * \return 0 в случае успешного завершения,
 * 		`ERROR_MEMORY_ALLOC` в случае ошибки выделения памяти.
 */
int url_query_params_load(url_query_params q, const char* src);

/**
 * Эта функция записывет параметры query, содержащиеся в обекте типа url_query_params, в C-строку.
 *
 * \param [in] q Переменная типа  url_query_params, информация из которой записывается в строку.
 *
 * \param [out] dst Указатель на буфер, в котором будет формироваться C-строка, представляющая
 * query-часть URL, то есть из строка, вида:
 *
 * `key1=value1&key2=value2&key3=value3...keyN=valueN`
 *
 * \param [in] n Размер буфера `dst` в байтах, используется для защиты от переполнения буфера.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству символов,
 * записанных в буфер `*dst` , `ERROR_BUFFER_OVERFLOW` в случае переполнения буфера.
 *
 *
 */
ssize_t url_query_params_to_string(url_query_params q, char* dst, size_t n);

/**
 * Эта функция находит `value,` соответствующее заданному `key` в query-части URL.
 *
 * \param [in] q Переменная типа  url_query_params, соответствующая нужному query.
 *
 * \param [out] dst Указатель на буфер, в котором будет формироваться C-строка, содержащая искомое `value`.
 *
 * \param [in] n Размер буфера `dst` в байтах, используется для защиты от переполнения буфера.
 *
 * \param [in] key C-строка, содержащая ключ, значение которого ищется.
 *
 * \return Возвращает `0` в случае успешного завершения, `ERROR_BUFFER_OVERFLOW` в случае переполнения буфера,
 * `ERROR_NO_SUCH_KEY` в случае, если ключ, равный `key`, отсутствует в данном query.
 */
int url_query_params_get_value(url_query_params q, char* dst, size_t n, const char* key);

/**
 *  Эта функция устанавливае `value,` соответствующее заданному `key` в query-части URL.
 *  Если заданного ключа в данном query нет, то функция НЕ добавляет его, а возвращает ошибку.
 *
 * \param [in, out] q Переменная типа  url_query_params, соответствующая нужному query.
 *
 * \param [in] key C-строка, содержащая ключ, значение которого устанавливается.
 *
 * \param [in] val C-строка, содержащая значение, которое устанавливается для заданного ключа.
 *
 * \return Возвращает `0` в случае успешного завершения, `ERROR_MEMORY_ALLOC` в случае ошибки выделения
 * памяти, `ERROR_NO_SUCH_KEY` в случае, если ключ, равный `key`, отсутствует в данном query.
 */
int url_query_params_set_value(url_query_params q, const char* key, const char* val);

/**
 * Эта функция удаляет из query-части URL пару `key=value,` соответствующую заданному ключу.
 * Если заданного ключа в данном query нет, то функция не делает ничего, но возвращает ошибку,
 * показывающую эту ситуацию.
 *
 * \param [in, out] q  Переменная типа  url_query_params, соответствующая нужному query.
 *
 * \param [in] key C-строка, содержащая ключ, соответствующая которому пара удаляется из query.
 *
 * \return Возвращает `0` в случае успешного удаления пары `key=value,` `ERROR_NO_SUCH_KEY` если
 * пары, соответствующей заданному `key` в данном query нет.
 */
int url_query_params_remove_key(url_query_params q, const char* key);

/**
 *	Эта функция добавляет в query-часть URL пару `key=value.` Пара добавляется в конец query. Если
 *	в данном query уже есть пара, соответствующая данному ключу, то её значение не меняется, исходный
 *	query не изменяется, и возвращается соответствующая ошибка.
 *
 *	\param [in, out] q Переменная типа  url_query_params, соответствующая нужному query.
 *
 *	\param [in] key C-строка, содержащая ключ добавляемой пары.
 *
 *	\param [in] val C-строка, содержащая значение добавляемой пары. Если этот аргумент равен `NULL`,
 *	или представляет собой пустую строку, то в query добавляется только ключ без значения и без знака `=`.
 *
 *	\return Возвращает `0` в случае успешного добавления пары в query, `ERROR_MEMORY_ALLOC` в случае ошибки
 *	выделения памяти, `ERROR_KEY_ALREADY_EXIST` в случае, есди ключ из добавляемой пары уже содержится
 *	в данном query.
 */
int url_query_params_add_key(url_query_params q, const char* key, const char* val);

/**
 * Эта функция возвращает индекс (порядковый номер, считая с 0) пары типа `key=value` в query-части URL.
 *
 * \param [in] q Переменная типа  url_query_params, соответствующая нужному query.
 *
 * \param [in] key C-строка, содержащая ключ искомой пары.
 *
 * \return В случае успешного завершения возвращает неотрицательное число, представляющее собой индекс искомой
 * пары в данном query, `ERROR_NO_SUCH_KEY` если в данном query нет пары с заданным ключом.
 *
 */
ssize_t url_query_params_get_key_index(url_query_params q, const char* key);

/**
 * Эта функция устанавливает индекс пары типа `key=value` в query-части URL, то есть перемещает пару на
 * указанное место. При этом изменяются и индексы пар, расположенных между старым и новым месторасположением
 * перемещаемой пары. Если указанный индекс больше количества пар в данном query, то функция не делает ничего,
 * но возвращает значение, проясняющее данную ситуацию.
 *
 * \param [in, out] q Переменная типа  url_query_params, соответствующая нужному query.
 *
 * \param [in] key C-строка, содержащая ключ перемещаемой пары.
 *
 * \param [in] index Индекс, который требуется задать для данной пары.
 *
 * \return Возвращает `0` в случае успешного перемещения пары, `ERROR_NO_SUCH_KEY_INDEX` если требуемый
 * индекс превышает возможное значение, `ERROR_NO_SUCH_KEY` если пары с ключом `key` в данном query
 * нет вообще.
 */
int url_query_params_set_key_index(url_query_params q, const char* key, size_t index);

/**
 * Эта функция делает объект типа url_query_params пустым.
 *
 *  \param [in, out] q Переменная типа  url_query_params, которая должнга обнулиться.
 *
 */
void url_query_params_clear(url_query_params q);


/**
 * Эта функция возвращает количество пар типа `key=value` в query-части URL.
 *
 * \param [in] q Переменная типа  url_query_params, соответствующая нужному query.
 *
 * \return Количество пар типа `key=value` в данном query.
 */
static __inline size_t url_query_params_size(url_query_params p)
{
	return p->n;
}

/**
 * Эта функция позволяет получить все ключи в query-части URL.
 *
 * \param [in] q Переменная типа  url_query_params, соответствующая нужному query.
 *
 * \param [out] r Указатель на массив строк, в которые содержат ключи данного query.
 */
static __inline void url_query_params_keys(url_query_params p, const char ***r)
{
	*r = (const char**)(p->keys);
	return;
}


#endif /* _URL_QUERY_H_ */
