/**
 * \file
 *
 * Это основной заголовочный файл библиотеки, предназначенной для работы с URL.
 *
 * Он содержит прототипы всех её функций, определения используемых стуктур, типов, констант и кодов ошибок.
 */
#ifndef _URL_H_
#define _URL_H_

#include<url_query.h>
//#include<url_canonicalize.h>

#include<stddef.h>
#include<unistd.h>


#include<url_error.h>


#define NOT_USE_AUTHORITY 0x00000001

#ifdef __cplusplus
extern "C" {
#endif


/**
 * Эта функция выполняет pct-декодирование одного байта.
 *
 * \param [in] str Указатель на строку, первые три символа которой должны иметь вид `%XY`,
 * где `X` и `Y` - произвольные шестнадцатиричные цифры. Эта строка не обязана завершаться нулевым символом.
 *
 * \return В случае успешного завершения возвращает целое число, младший байт которого представляет собой
 * результат pct-декодирования исходной строки. В случае неудачи возвращает отрицательное число.
 */
int url_decode_char(const char* str);

/**
 * Эта функция выполняет pct-кодирование одного байта.
 *
 * \param [out] dst Указатель на буфер, в котором в виде C-строки будет сохранён результат pct-кодирования
 * одного байта. Должен вмещать по меньшей мере 4 байта.
 *
 * \param [in] b Целое число, младший байт которого должен быть закодирован.
 *
 * \return Указатель на результат `dst`.
 */
char* url_encode_char(char* dst, unsigned int b);

/**
 * Эта функция подсчитывает количество байтов в заданном URL, которые следует подвергнуть
 * pct-кодированию.
 *
 * \param [in] url Указатель на URL  в виде C-строки, в котором надо подсчитать количество кодируемых байтов.
 *
 * \return Количество байтов, которые должны быть закодированы.
 */
size_t url_count_to_encode(const char* url);

/**
 * Эта функция подсчитывает количество байтов в заданном URL, которые следует подвергнуть
 * pct-декодированию, то есть количество групп смволов `%XY`, где `X` и `Y` - произвольные шестнадцатиричные цифры.
 *
 * \param [in] url Указатель на URL  в виде C-строки, в котором надо подсчитать количество декодируемых байтов.
 *
 * \return Количество байтов в заданном URL, которые должны быть декодированы.
 */
size_t url_count_to_decode(const char* url);

/**
 * Эта функция выполняет pct-декодирование заданного URL  и помещает результат в буфер `dst.`
 *
 * \param [out] dst Указатель на буфер, в котором будет сохранён декодированный URL
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, который должен быть декодирован.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_decode(char* dst, size_t n, const char* url);

/**
 * Эта функция выполняет pct-кодирование заданного URL  и помещает результат в буфер `dst.`
 *
 * \param [out] dst Указатель на буфер, в котором будет сохранён закодированный URL
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, который должен быть закодирован.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_encode(char* dst, size_t n, const char* url);

/**
 * Эта функция извлекает из URL содержащуюся в нём схему, если она есть,
 * и помещает её в буфер `dst.`
 *
 * \param [out] dst Указатель на буфер, в котором будет сохранена найденная схема URL
 * в виде C-строки. Если исходный URL не содержит схемы, то в `dst` будет записана пустая строка.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, схему из которого извлекает функция.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_get_scheme(char* dst, size_t n, const char* url);

/**
 * Эта функция устанавливает в заданном URL заданную схему. Если исходный URL не имел никакой схемы,
 * то в него добавляется заданная схема. Если исходный URL уже содержал какую-нибудь схему,
 * то она заменяется на заданую.
 *
 * Остальные поля URL не изменяются и не удаляются.
 *
 * В любом случае исходный URL не изменяется, а в отдельном буфере формируется новый.
 *
 * \param [out] dst Указатель на буфер, в котором будет сформирован новый URL
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, схему из которого изменяет функция.
 * Если этот аргумент равен `NULL` или представляет собой пустую строку, то в буфер `dst` просто записывается
 * схема вместе с символами `"://"`, начиная тем самым формирование нового URL.
 *
 * \param [in] scheme Схема, которая должна быть установлена в новом URL БЕЗ символов `"://"`.
 * Если этот аргумент равен `NULL` или представляет собой пустую строку, то из исходного URL удаляется схема,
 * если она в нём была.
 *
 * \param [in] flags Задаёт флаги, управляющие работой функции, которые могут быть объединены с помощью операции
 * поразрядного ИЛИ (|). В настоящее время поддерживается только флаг NOT_USE_AUTHORITY. При его наличии в случае
 * необходимости добавления схемы в URL, то есть если её не было в `url`, после символа `:`  не ставятся символы `//`.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_set_scheme(char* dst, size_t n, const char* url, const char* scheme, unsigned int flags);

/**
 * Эта функция возвращает количество байтов, которые требуются для представления имени хоста,
 * содержащегося в данном URL, НЕ СЧИТАЯ завершающего нулевого символа.
 *
 * \param [in] url Исходный URL в виде C-строки, длину имени узла из которого возвращает функция.
 *
 * \return Функция возвращает количество байтов, которые требуются для представления имени хоста,
 * содержащегося в данном URL, НЕ СЧИТАЯ завершающего нулевого символа.
 */
size_t url_get_host_size(const char *src);

/**
 * Эта функция извлекает из URL содержащееся в нём имя узла(хоста),и помещаего её в буфер `dst.`
 *
 * \param [out] dst Указатель на буфер, в котором будет сохранено имя хоста
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, имя узла из которого извлекает функция.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_get_host(char* dst, size_t n, const char* url);

/**
 * Эта функция устанавливает в заданном URL заданное имя узла (хоста).
 *
 * Остальные поля URL не изменяются и не удаляются.
 *
 * В любом случае исходный URL не изменяется, а в отдельном буфере формируется новый.
 *
 * \param [out] dst Указатель на буфер, в котором будет сформирован новый URL
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, имя узла из которого изменяет функция.
 *
 * \param [in] host Имя узла, которое должно быть установлено в новом URL.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_set_host(char* dst, size_t n, const char* url, const char* host);

/**
 * Эта функция возвращает количество байтов, которые требуются для представления пути (path),
 * содержащегося в данном URL, НЕ СЧИТАЯ завершающего нулевого символа.
 *
 * \param [in] url Исходный URL в виде C-строки, длину пути (path) из которого возвращает функция.
 *
 * \return Функция возвращает количество байтов, которые требуются для представления пути (path),
 * содержащегося в данном URL, НЕ СЧИТАЯ завершающего нулевого символа.
 */
size_t url_get_path_size(const char* url);


/**
 * Эта функция извлекает из URL содержащийся в нём путь, если он есть,
 * и помещает её в буфер `dst.`
 *
 * \param [out] dst Указатель на буфер, в котором будет сохранён найденный путь из URL
 * в виде C-строки. Если исходный URL не содержит пути, то в `dst` будет записана пустая строка.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, путь из которого извлекает функция.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_get_path(char* dst, size_t n, const char* url);

/**
 * Эта функция устанавливает в заданном URL заданный заданный путь. Если исходный URL не имел никакого пути,
 * то в него добавляется заданный путь. Если исходный URL уже содержал какой-нибудь путь,
 * то он заменяется на заданный.
 *
 * Остальные поля URL не изменяются и не удаляются.
 *
 * В любом случае исходный URL не изменяется, а в отдельном буфере формируется новый.
 *
 * \param [out] dst Указатель на буфер, в котором будет сформирован новый URL
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, путь из которого изменяет функция.
 *
 * \param [in] path Путь, который должен быть установлен в новом URL. Может быть как с первым символом `/`,
 * так и без него.
 * Если этот аргумент равен `NULL` или представляет собой пустую строку, то из исходного URL удаляется путь,
 * если он в нём был.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_set_path(char* dst, size_t n, const char* url, const char* path);


/**
 * Эта функция возвращает номер порта, содержащийся в заданном URL.
 *
 * Остальные поля URL не изменяются и не удаляются.
 *
 * В любом случае исходный URL не изменяется, а в отдельном буфере формируется новый.
 *
 * \param [in] url Исходный URL в виде C-строки, порт в котором определяет функция.
 *
 * \return Номет порта, аодержащийся в данном URL. Если в URL нет поля порта, то возвращает 0.
 *
 */
unsigned short url_get_port(const char* url);

/**
 * Эта функция устанавливает в заданном URL заданный заданный номер порта. Если исходный URL не содержал поля порта,
 * то в него добавляется заданный порт. Если исходный URL уже содержал какой-нибудь порт,
 * то он заменяется на заданный.
 *
 * Остальные поля URL не изменяются и не удаляются.
 *
 * В любом случае исходный URL не изменяется, а в отдельном буфере формируется новый.
 *
 * \param [out] dst Указатель на буфер, в котором будет сформирован новый URL
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, порт в котором устанавливает функция.
 *
 * \param [in] port Номер порта, который должен быть установлен в URL.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_set_port(char* dst, size_t n, const char* url, unsigned short port);

/**
 * Эта функция удаляет из URL поле, представляющее собой порт, если оно есть в этом URL.
 * Эта функция ИЗМЕНЯЕТ переданный ей в качестве аргумента URL.
 *
 * \param [in, out] url URL в виде C-строки из которого должен быть удалён порт, если он есть.
 *
 * \return Указатель на изменённый URL.
 */
char* url_remove_port(char* url);


/**
 * Эта функция извлекает из URL содержащееся в нём поле, идентифицирующее пользователя, если он есть,
 * и помещает его в буфер `dst.`
 *
 * \param [out] dst Указатель на буфер, в котором будет сохранёна информация о пользователе из URL
 * в виде C-строки. Если исходный URL не содержит информкации о пользователе, то в `dst` будет записана пустая строка.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, путь из которого извлекает функция.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_get_userinfo(char* dst, size_t n, const char* url);


/**
 * Эта функция устанавливает в заданном URL заданную информацию о пользователе.
 * Если исходный URL не имел никакой информации о пользователе,
 * то в него добавляется заданная информация. Если исходный URL уже содержал какую-нибудь информацию о пользователе,
 * то она заменяется на заданную.
 *
 * Остальные поля URL не изменяются и не удаляются.
 *
 * В любом случае исходный URL не изменяется, а в отдельном буфере формируется новый.
 *
 * \param [out] dst Указатель на буфер, в котором будет сформирован новый URL
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [in] url Исходный URL в виде C-строки, информацию о пользователе из которого изменяет функция.
 *
 * \param [in] userinfo Информация о пользователе, которая должна быть установлен в новом URL.
 * Если этот аргумент равен `NULL` или представляет собой пустую строку, то функция ничего не делает и возвращает 0.
 *
 * \return В случае успешного завершения возвращает положительное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки.
 *
 * Буферы `dst` и `url` НЕ ДОЛЖНЫ перекрываться!
 */
ssize_t url_set_userinfo(char* dst, size_t n, const char* url, const char* userinfo);

/**
 * Эта функция удаляет из URL поле, представляющее информацию о пользователе (userinfo), если она есть в этом URL.
 * Эта функция ИЗМЕНЯЕТ переданный ей в качестве аргумента URL.
 *
 * \param [in, out] url URL в виде C-строки из которого должна быть удалена информация о пользователе, если оно есть.
 *
 * \return Указатель на изменённый URL.
 */
char* url_remove_userinfo(char* url);

/**
 * Эта функция позволяет получить query-часть URL в формате объекта типа url_query_params.
 *
 * \param [out] q Инициализированный объект типа url_query_params, в котором сохраняется информация о query-части URL.
 *
 * \param [in] url C-строка, содержащая URL, query-часть которого получается.
 *
 * \return В случае успешного завершения возвращает `0`, `ERROR_MEMORY_ALLOC` в случае ошибки при выделении памяти,
 * `ERROR_BUFFER_OVERFLOW` в случае переполнения буфера.
 */
int url_get_query(url_query_params q, const char* url);

/**
 * Эта функция позволяет установит query-часть URL.
 *
 * Остальные поля URL не изменяются и не удаляются.
 *
 * В любом случае исходный URL не изменяется, а в отдельном буфере формируется новый.
 *
 * \param [out] dst Указатель на буфер, в котором будет сформирован новый URL
 * в виде C-строки.
 *
 * \param [in] n Размер буфера, адрес которого передаётся в `dst.` Используется для защиты от переполнения буфера.
 *
 * \param [out] q Объект типа url_query_params, в котором содержится информация об устанавливаемой query-части URL.
 * Если этот объект пуст, то исходный URL просто копируется в буфер `dst`.
 *
 * \param [in] url Исходный URL в виде C-строки, query-часть которого изменяет функция.
 *
 * \return В случае успешного завершения возвращает неотрицательное число, равное количеству БАЙТОВ,
 * записанных в буфер `dst,` НЕ СЧИТАЯ завершающего нулевого символа. В случае неудачи возвращает отрицательное
 * число с кодом возникшей ошибки, `ERROR_MEMORY_ALLOC` в случае ошибки при выделении памяти,
 * `ERROR_BUFFER_OVERFLOW` в случае переполнения буфера.
 *
 */
ssize_t url_set_query(char* dst, size_t n, url_query_params q, const char* url);

/**
 * Эта функция удаляет из URL его query-часть, если она есть в этом URL.
 * Эта функция ИЗМЕНЯЕТ переданный ей в качестве аргумента URL.
 *
 * \param [in, out] url URL в виде C-строки из которого должна быть удалена query-часть, если она есть.
 *
 * \return Указатель на изменённый URL.
 */
char* url_remove_query(char*);

/**
 * Эта функция удаляет фрагмент из заданного URL. Это одна из немногих функций, которая изменяет передаваемый
 * ей аргумент.
 *
 * \param [in,out] url URL в виде C-строки, фрагмент из которого должен быть удалён, если он есть.
 *
 * \return Указаель на обработанный URL.
 */
char* url_remove_fragment(char* url);


#ifdef __cplusplus
}
#endif

#endif /* _URL_H_ */
